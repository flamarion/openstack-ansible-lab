- name: Create placement database
  community.mysql.mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: placement
    state: present

- name: Create placement db user
  community.mysql.mysql_user:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
    name: placement
    host: "{{ item }}"
    password: "{{ admin_pass }}"
    priv:
      "placement.*": "ALL,GRANT"
  loop:
    - localhost
    - "{{ hostvars[groups['controllers'][0]]['ansible_hostname'] }}"
    - "{{ groups['controllers'][0] }}"

- name: Create OS placement user
  openstack.cloud.identity_user:
    cloud: "{{ cloud }}"
    description: "Placement Service User"
    state: present
    name: placement
    password: "{{ admin_pass }}"
    domain: default
    default_project: service

- name: Assing role admin to placement user in service project
  openstack.cloud.role_assignment:
    cloud: "{{ cloud }}"
    user: placement
    role: admin
    project: service

- name: Create placement service
  openstack.cloud.catalog_service:
    cloud: "{{ cloud }}"
    state: present
    name: placement
    service_type: placement
    is_enabled: true
    description: Placement API

- name: Create placement service endpoint
  openstack.cloud.endpoint:
    cloud: "{{ cloud }}"
    service: placement
    endpoint_interface: "{{ item }}"
    url: "http://{{ hostvars[groups['controllers'][0]]['ansible_hostname'] }}:8778"
    region: RegionOne
    state: present
  loop:
    - admin
    - public
    - internal

- name: Install placement
  ansible.builtin.apt:
    name: placement-api
    state: "{{ ('present' if op == 'install') or 'latest' }}"
    update_cache: true

- name: Placement configuration
  ansible.builtin.template:
    src: placement.conf.j2
    dest: /etc/placement/placement.conf
    mode: 0640
    owner: placement
    group: placement
  register: placement_config
  notify:
    - Restart apache2

- name: Perform a placement DB sync
  ansible.builtin.command: "placement-manage db sync"
  become: true
  become_user: placement
  become_method: sudo
  become_flags: 'su - placement -s /bin/sh -c'
  register: placement_db_synced
  changed_when: placement_db_synced.stdout is not search("")
  notify:
    - Placement DB sync
    - Restart apache2

- name: Start apache2 service
  ansible.builtin.systemd:
    name: apache2
    state: started

- name: Checking placement installation
  ansible.builtin.command: "placement-status upgrade check"
  changed_when: false
  register: check_placement

- name: Placement status
  ansible.builtin.debug: msg="{{ check_placement.stdout_lines }}"
