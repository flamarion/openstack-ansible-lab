- name: Create keystone database
  community.mysql.mysql_db:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: keystone
    state: present

- name: Create keystone db user
  community.mysql.mysql_user:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
    name: keystone
    host: "{{ item }}"
    password: "{{ admin_pass }}"
    priv:
      "keystone.*": "ALL,GRANT"
  with_items:
    - localhost
    - "{{ hostvars[groups['controllers'][0]]['ansible_hostname'] }}"
    - "{{ groups['controllers'][0] }}"

- name: Install keystone
  ansible.builtin.apt:
    name: keystone
    state: "{{ ('present' if op == 'install') or 'latest' }}"
    update_cache: true
  register: keystone_installed
  notify:
    - Keystone DB sync

- name: Keystone configuration
  ansible.builtin.template:
    src: keystone.conf.j2
    dest: /etc/keystone/keystone.conf
    mode: 0640
    owner: keystone
    group: keystone
  register: keystone_config
  when: keystone_installed is succeeded
  notify:
    - Restart apache2

- name: Perform keystone DB sync
  ansible.builtin.command: "keystone-manage db_sync --check"
  become: true
  become_user: keystone
  become_method: sudo
  become_flags: 'su - keystone -s /bin/sh -c'
  register: check_keystone_db_sync
  changed_when: check_keystone_db_sync.stdout_lines is not search("All db_sync commands are upgraded to the same version and up-to-date.")
  notify:
    - Keystone DB sync

- name: Create fernet keys
  ansible.builtin.command: "keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone"
  register: fernet_keys_configured
  changed_when: fernet_keys_configured.stdout_lines is not search("Key repository is already initialized; aborting.")
  notify:
    - Create fernet keys

- name: Create credentials setup
  ansible.builtin.command: "keystone-manage credential_setup --keystone-user keystone --keystone-group keystone"
  register: credentials_setup
  changed_when: credentials_setup.stdout_lines is not search("Key repository is already initialized; aborting.")
  notify:
    - Create credentials setup

- name: Bootstrap Openstack
  ansible.builtin.command: >
    keystone-manage bootstrap --bootstrap-password {{ admin_pass }}
    --bootstrap-admin-url http://{{ hostvars[groups['controllers'][0]]['ansible_hostname'] }}:5000/v3/
    --bootstrap-internal-url http://{{ hostvars[groups['controllers'][0]]['ansible_hostname'] }}:5000/v3/
    --bootstrap-public-url http://{{ hostvars[groups['controllers'][0]]['ansible_hostname'] }}:5000/v3/
    --bootstrap-region-id RegionOne
  register: openstack_bootstraped
  changed_when: openstack_bootstraped.stdout_lines is not search("skipping creation.")
  notify:
    - Bootstrap openstack
    - Restart apache2

- name: Creates openrc file
  ansible.builtin.template:
    src: openrc.j2
    dest: /root/openrc
    mode: 0644
    owner: root
    group: root

- name: Create openstack dir
  ansible.builtin.file:
    path: /etc/openstack
    state: directory
    owner: root
    group: root
    mode: 0755
  register: openstack_dir

- name: Create clouds.yaml with Admin creds
  ansible.builtin.template:
    src: clouds.yaml.j2
    dest: /etc/openstack/clouds.yaml
    owner: root
    group: root
    mode: 0666
  when: openstack_dir is succeeded
  register: clouds_yaml

- name: Create service project
  openstack.cloud.project:
    cloud: "{{ cloud }}"
    state: present
    name: service
    description: Service project
    domain_id: default
    enabled: true
